autoplot(type = "heatmap") +
theme_clean() +
labs(x = "Observed",
y = "Predicted",
title = paste0("Confusion Matrix iSize + iShape (distal): ", toupper(var_name)),
subtitle = paste0("Data: test (", "N = ", nrow(last_fit_lda$.predictions[[1]]), ")"),
fill = NULL) +
theme(legend.position = "none")
ggsave(p2,
filename = here("output","plots", paste0("confmat_distal_test_", var_name, ".png")),
dpi = 300,
units = "px",
width = 3000,
height = 2000)
mitat_distal <- bind_rows(mitat(lda_pred,
truth = subspecies,
estimate = .pred_class) %>%
mutate(element = var_name,
variables = "distal",
set = "train") %>%
relocate(variables,element, set),
mitat(list_output[[3]],
truth = subspecies,
estimate = .pred_class) %>%
mutate(element = var_name,
variables = "distal",
set = "test") %>%
relocate(variables,element, set))
rm(p1,p2, list_output, data_split, train_data, test_data)
## Proximal
list_output <- list()
data_split <- initial_split(df_proximal,
prop = 4/5,
strata = subspecies)
train_data <- training(data_split)
test_data <-  testing(data_split)
cv_folds <-vfold_cv(train_data,
v = 10,
strata = subspecies)
rec_df <- recipe(
subspecies ~  .,
data = train_data) %>%
update_role(specimen, new_role = "ID") %>%
step_naomit(everything()) %>%
step_normalize((all_numeric()))
lda_wflow <- workflow() %>%
add_recipe(rec_df) %>%
add_model(lda_spec)
lda_mod <- lda_wflow %>%
fit_resamples(cv_folds,
metrics = metric_set(
accuracy, kap),
control = control_resamples(
save_pred = T,
extract = get_model))
lda_pred <- lda_mod %>%
collect_predictions()
p1 <-  lda_pred %>%
conf_mat(subspecies, .pred_class) %>%
autoplot(type = "heatmap") +
theme_clean() +
labs(x = "Observed",
y = "Predicted",
title = paste0("Confusion Matrix iSize + iShape (proximal): ", toupper(var_name)),
subtitle = paste0("Data: training (", "N = ", nrow(train_data), ")"),
fill = NULL) +
theme(legend.position = "none")
ggsave(p1,
filename = here("output","plots", paste0("confmat_proximal_train_", var_name, ".png")),
dpi = 300,
units = "px",
width = 3000,
height = 2000)
last_fit_lda <- last_fit(
lda_wflow,
split = data_split,
metrics = metric_set(accuracy, kap))
list_output[[3]] <- last_fit_lda %>%
collect_predictions()
list_output[[4]]   <- list_output[[3]]  %>%
conf_mat(subspecies, .pred_class)
p2 <- list_output[[4]] %>%
autoplot(type = "heatmap") +
theme_clean() +
labs(x = "Observed",
y = "Predicted",
title = paste0("Confusion Matrix iSize + iShape (proximal): ", toupper(var_name)),
subtitle = paste0("Data: test (", "N = ", nrow(last_fit_lda$.predictions[[1]]), ")"),
fill = NULL) +
theme(legend.position = "none")
ggsave(p2,
filename = here("output","plots", paste0("confmat_proximal_test_", var_name, ".png")),
dpi = 300,
units = "px",
width = 3000,
height = 2000)
mitat_proximal <-  bind_rows(mitat(lda_pred,
truth = subspecies,
estimate = .pred_class) %>%
mutate(element = var_name,
variables = "proximal",
set = "train") %>%
relocate(variables,element, set),
mitat(list_output[[3]],
truth = subspecies,
estimate = .pred_class) %>%
mutate(element = var_name,
variables = "proximal",
set = "test") %>%
relocate(variables,element, set))
rm(p1,p2, list_output, data_split, train_data, test_data)
## Shaft
list_output <- list()
data_split <- initial_split(df_shaft,
prop = 4/5,
strata = subspecies)
train_data <- training(data_split)
test_data <-  testing(data_split)
cv_folds <-vfold_cv(train_data,
v = 10,
strata = subspecies)
rec_df <- recipe(
subspecies ~  .,
data = train_data) %>%
update_role(specimen, new_role = "ID") %>%
step_naomit(everything()) %>%
step_normalize((all_numeric()))
lda_wflow <- workflow() %>%
add_recipe(rec_df) %>%
add_model(lda_spec)
lda_mod <- lda_wflow %>%
fit_resamples(cv_folds,
metrics = metric_set(
accuracy, kap),
control = control_resamples(
save_pred = T,
extract = get_model))
lda_pred <- lda_mod %>%
collect_predictions()
p1 <-  lda_pred %>%
conf_mat(subspecies, .pred_class) %>%
autoplot(type = "heatmap") +
theme_clean() +
labs(x = "Observed",
y = "Predicted",
title = paste0("Confusion Matrix iSize + iShape (shaft): ", toupper(var_name)),
subtitle = paste0("Data: training (", "N = ", nrow(train_data), ")"),
fill = NULL) +
theme(legend.position = "none")
ggsave(p1,
filename = here("output","plots", paste0("confmat_shaft_train_", var_name, ".png")),
dpi = 300,
units = "px",
width = 3000,
height = 2000)
last_fit_lda <- last_fit(
lda_wflow,
split = data_split,
metrics = metric_set(accuracy, kap))
list_output[[3]] <- last_fit_lda %>%
collect_predictions()
list_output[[4]]   <- list_output[[3]]  %>%
conf_mat(subspecies, .pred_class)
p2 <- list_output[[4]] %>%
autoplot(type = "heatmap") +
theme_clean() +
labs(x = "Observed",
y = "Predicted",
title = paste0("Confusion Matrix iSize + iShape (shaft): ", toupper(var_name)),
subtitle = paste0("Data: test (", "N = ", nrow(last_fit_lda$.predictions[[1]]), ")"),
fill = NULL) +
theme(legend.position = "none")
ggsave(p2,
filename = here("output","plots", paste0("confmat_shaft_test_", var_name, ".png")),
dpi = 300,
units = "px",
width = 3000,
height = 2000)
mitat_shaft <-  bind_rows(mitat(lda_pred,
truth = subspecies,
estimate = .pred_class) %>%
mutate(element = var_name,
variables = "shaft",
set = "train") %>%
relocate(variables,element, set),
mitat(list_output[[3]],
truth = subspecies,
estimate = .pred_class) %>%
mutate(element = var_name,
variables = "shaft",
set = "test") %>%
relocate(variables,element, set))
rm(p1,p2, list_output, data_split, train_data, test_data)
## Complete
list_output <- list()
data_split <- initial_split(df_complete,
prop = 4/5,
strata = subspecies)
train_data <- training(data_split)
test_data <-  testing(data_split)
cv_folds <-vfold_cv(train_data,
v = 10,
strata = subspecies)
rec_df <- recipe(
subspecies ~  .,
data = train_data) %>%
update_role(specimen, new_role = "ID") %>%
step_naomit(everything()) %>%
step_normalize((all_numeric()))
lda_wflow <- workflow() %>%
add_recipe(rec_df) %>%
add_model(lda_spec)
lda_mod <- lda_wflow %>%
fit_resamples(cv_folds,
metrics = metric_set(
accuracy, kap),
control = control_resamples(
save_pred = T,
extract = get_model))
lda_pred <- lda_mod %>%
collect_predictions()
p1 <-  lda_pred %>%
conf_mat(subspecies, .pred_class) %>%
autoplot(type = "heatmap") +
theme_clean() +
labs(x = "Observed",
y = "Predicted",
title = paste0("Confusion Matrix iSize + iShape (complete): ", toupper(var_name)),
subtitle = paste0("Data: training (", "N = ", nrow(train_data), ")"),
fill = NULL) +
theme(legend.position = "none")
ggsave(p1,
filename = here("output","plots", paste0("confmat_complete_train_", var_name, ".png")),
dpi = 300,
units = "px",
width = 3000,
height = 2000)
last_fit_lda <- last_fit(
lda_wflow,
split = data_split,
metrics = metric_set(accuracy, kap))
list_output[[3]] <- last_fit_lda %>%
collect_predictions()
list_output[[4]]   <- list_output[[3]]  %>%
conf_mat(subspecies, .pred_class)
p2 <- list_output[[4]] %>%
autoplot(type = "heatmap") +
theme_clean() +
labs(x = "Observed",
y = "Predicted",
title = paste0("Confusion Matrix iSize + iShape (complete): ", toupper(var_name)),
subtitle = paste0("Data: test (", "N = ", nrow(last_fit_lda$.predictions[[1]]), ")"),
fill = NULL) +
theme(legend.position = "none")
ggsave(p2,
filename = here("output","plots", paste0("confmat_complete_test_", var_name, ".png")),
dpi = 300,
units = "px",
width = 3000,
height = 2000)
mitat_complete <-  bind_rows(mitat(lda_pred,
truth = subspecies,
estimate = .pred_class) %>%
mutate(element = var_name,
variables = "complete",
set = "train") %>%
relocate(variables,element, set),
mitat(list_output[[3]],
truth = subspecies,
estimate = .pred_class) %>%
mutate(element = var_name,
variables = "complete",
set = "test") %>%
relocate(variables,element, set))
table_mitat <- bind_rows(mitat_full,
mitat_distal,
mitat_proximal,
mitat_shaft,
mitat_complete) %>%
dplyr::select(-.estimator) %>%
pivot_wider(names_from = ".metric",
values_from = ".estimate") %>%
rename("Variable set" = "variables",
"Element" = "element",
"Test/Train" = "set",
"Accuracy" = "accuracy",
"Balanced accuracy" = "bal_accuracy",
"F1-measure" = "f_meas")
write.xlsx(table_mitat,
here("output", "tables", paste0(var_name,"_rda_measures.xlsx")))
rm(p1,p2, list_output, data_split, train_data, test_data)}
for(i in c(1,2,3,4,6,7)){
lda_subsets(i)
}
list_database[[x]]
df_main %>%
filter(element == elementnames[x]) %>%
pivot_wider(names_from = "variable",
values_from = "value") %>%
filter(subspecies %in% c("Rangifer tarandus fennicus",
"Rangifer tarandus tarandus",
"Rangifer tarandus tarandus wild") &
sex %in% c("f", "m")) %>%
mutate_if(is.factor, droplevels) %>%
mutate(sex = case_when(castrated == "yes" ~ factor("c"),
.default = sex))
df_main %>%
filter(element == elementnames[x]) %>%
pivot_wider(names_from = "variable",
values_from = "value") %>%
filter(subspecies %in% c("Rangifer tarandus fennicus",
"Rangifer tarandus tarandus",
"Rangifer tarandus tarandus wild") &
sex %in% c("f", "m")) %>%
mutate_if(is.factor, droplevels) %>%
mutate(sex = case_when(castrated == "yes" ~ factor("c"),
.default = sex)) %>% names()
df_main %>%
filter(element == elementnames[x]) %>%
pivot_wider(names_from = "variable",
values_from = "value") %>%
filter(subspecies %in% c("Rangifer tarandus fennicus",
"Rangifer tarandus tarandus",
"Rangifer tarandus tarandus wild") &
sex %in% c("f", "m")) %>%
mutate_if(is.factor, droplevels) %>%
mutate(sex = case_when(castrated == "yes" ~ factor("c"),
.default = sex)) %>%
dplyr::select(specimen, subspecies, gl:pl)
df_main %>%
filter(element == elementnames[x]) %>%
pivot_wider(names_from = "variable",
values_from = "value") %>%
filter(subspecies %in% c("Rangifer tarandus fennicus",
"Rangifer tarandus tarandus",
"Rangifer tarandus tarandus wild") &
sex %in% c("f", "m")) %>%
mutate_if(is.factor, droplevels) %>%
mutate(sex = case_when(castrated == "yes" ~ factor("c"),
.default = sex)) %>%
dplyr::select(specimen, subspecies, gl:pl) %>%
drop_na()
df_main %>%
filter(element == elementnames[x])
df_main %>%
filter(element == elementnames[x]) %>%
filter(variable %in% c("gl", "glc", "bp", "dc", "sd", "sdd", "cd", "bd", "dd", "bt", "pl"))
df_main %>%
filter(element == elementnames[x]) %>%
filter(variable %in% c("gl", "glc", "bp", "dc", "sd", "sdd", "cd", "bd", "dd", "bt", "pl"))
pivot_wider(names_from = "variable",
values_from = "value")
df_main %>%
filter(element == elementnames[x]) %>%
filter(variable %in% c("gl", "glc", "bp", "dc", "sd", "sdd", "cd", "bd", "dd", "bt", "pl")) %>%
pivot_wider(names_from = "variable",
values_from = "value")
df_main %>%
filter(element == elementnames[x]) %>%
filter(variable %in% c("gl", "glc", "bp", "dc", "sd", "sdd", "cd", "bd", "dd", "bt", "pl"))
df_main %>%
filter(element == elementnames[x]) %>%
filter(variable %in% c("gl", "glc", "bp", "dc", "sd", "sdd", "cd", "bd", "dd", "bt", "pl")) %>%
select(element, specimen, subspecies, group, sex, variable, value)
df_main %>%
filter(element == elementnames[x]) %>%
filter(variable %in% c("gl", "glc", "bp", "dc", "sd", "sdd", "cd", "bd", "dd", "bt", "pl")) %>%
select(element, specimen, subspecies, group, sex, variable, value) %>% map(summar)
df_main %>%
filter(element == elementnames[x]) %>%
filter(variable %in% c("gl", "glc", "bp", "dc", "sd", "sdd", "cd", "bd", "dd", "bt", "pl")) %>%
select(element, specimen, subspecies, group, sex, variable, value) %>% map(summar)y
df_main %>%
filter(element == elementnames[x]) %>%
filter(variable %in% c("gl", "glc", "bp", "dc", "sd", "sdd", "cd", "bd", "dd", "bt", "pl")) %>%
select(element, specimen, subspecies, group, sex, variable, value) %>% map(summary)
df_main %>%
filter(element == elementnames[x]) %>%
filter(variable %in% c("gl", "glc", "bp", "dc", "sd", "sdd", "cd", "bd", "dd", "bt", "pl")) %>%
select(element, specimen, subspecies, group, sex, variable, value)
pivot_wider(names_from = "variable",
values_from = "value")
df_main %>%
filter(element == elementnames[x]) %>%
filter(variable %in% c("gl", "glc", "bp", "dc", "sd", "sdd", "cd", "bd", "dd", "bt", "pl")) %>%
select(element, specimen, subspecies, group, sex, variable, value) %>%
pivot_wider(names_from = "variable",
values_from = "value")
df_main %>%
filter(element == elementnames[x]) %>%
filter(variable %in% c("gl", "glc", "bp", "dc", "sd", "sdd", "cd", "bd", "dd", "bt", "pl")) %>%
select(element, specimen, subspecies, group, sex, variable, value) %>%
pivot_wider(names_from = "variable",
values_from = "value") %>%
filter(subspecies %in% c("Rangifer tarandus fennicus",
"Rangifer tarandus tarandus",
"Rangifer tarandus tarandus wild") &
sex %in% c("f", "m"))
df_main %>%
filter(element == elementnames[x]) %>%
filter(variable %in% c("gl", "glc", "bp", "dc", "sd", "sdd", "cd", "bd", "dd", "bt", "pl")) %>%
select(element, specimen, subspecies, group, sex, variable, value) %>%
pivot_wider(names_from = "variable",
values_from = "value") %>%
filter(subspecies %in% c("Rangifer tarandus fennicus",
"Rangifer tarandus tarandus",
"Rangifer tarandus tarandus wild") &
sex %in% c("f", "m")) %>%
mutate_if(is.factor, droplevels)
df_main %>%
filter(element == elementnames[x]) %>%
filter(variable %in% c("gl", "glc", "bp", "dc", "sd", "sdd", "cd", "bd", "dd", "bt", "pl")) %>%
select(element, specimen, subspecies, group, sex, variable, value) %>%
pivot_wider(names_from = "variable",
values_from = "value") %>%
filter(subspecies %in% c("Rangifer tarandus fennicus",
"Rangifer tarandus tarandus",
"Rangifer tarandus tarandus wild") &
sex %in% c("f", "m")) %>%
mutate_if(is.factor, droplevels) %>%
mutate(sex = case_when(castrated == "yes" ~ factor("c"),
.default = sex))
df_main %>%
filter(element == elementnames[x]) %>%
filter(variable %in% c("gl", "glc", "bp", "dc", "sd", "sdd", "cd", "bd", "dd", "bt", "pl")) %>%
select(element, specimen, subspecies, group, sex, castrated, variable, value) %>%
pivot_wider(names_from = "variable",
values_from = "value") %>%
filter(subspecies %in% c("Rangifer tarandus fennicus",
"Rangifer tarandus tarandus",
"Rangifer tarandus tarandus wild") &
sex %in% c("f", "m")) %>%
mutate_if(is.factor, droplevels) %>%
mutate(sex = case_when(castrated == "yes" ~ factor("c"),
.default = sex))
df_main %>%
filter(element == elementnames[x]) %>%
# filter(variable %in% c("gl", "glc", "bp", "dc", "sd", "sdd", "cd", "bd", "dd", "bt", "pl")) %>%
select(element, specimen, subspecies, group, sex, castrated, variable, value)
df_main %>%
filter(element == elementnames[x]) %>%
# filter(variable %in% c("gl", "glc", "bp", "dc", "sd", "sdd", "cd", "bd", "dd", "bt", "pl")) %>%
select(element, specimen, subspecies, group, sex, castrated, variable, value) %>%
pivot_wider(names_from = "variable",
values_from = "value")
df_main %>%
filter(element == elementnames[x]) %>%
# filter(variable %in% c("gl", "glc", "bp", "dc", "sd", "sdd", "cd", "bd", "dd", "bt", "pl")) %>%
select(element, specimen, subspecies, group, sex, castrated, variable, value) %>%
pivot_wider(names_from = "variable",
values_from = "value") %>%
filter(subspecies %in% c("Rangifer tarandus fennicus",
"Rangifer tarandus tarandus",
"Rangifer tarandus tarandus wild") &
sex %in% c("f", "m")) %>%
mutate_if(is.factor, droplevels) %>%
mutate(sex = case_when(castrated == "yes" ~ factor("c"),
.default = sex))
df_main %>%
filter(element == elementnames[x]) %>%
select(element, specimen, subspecies, group, sex, castrated, variable, value) %>%
pivot_wider(names_from = "variable",
values_from = "value") %>%
filter(subspecies %in% c("Rangifer tarandus fennicus",
"Rangifer tarandus tarandus",
"Rangifer tarandus tarandus wild") &
sex %in% c("f", "m")) %>%
mutate_if(is.factor, droplevels) %>%
mutate(sex = case_when(castrated == "yes" ~ factor("c"),
.default = sex)) %>%
dplyr::select(specimen, subspecies, -contains("iShape"), -contains("iSize"))
df_main %>%
filter(element == elementnames[x]) %>%
select(element, specimen, subspecies, group, sex, castrated, variable, value) %>%
pivot_wider(names_from = "variable",
values_from = "value") %>%
filter(subspecies %in% c("Rangifer tarandus fennicus",
"Rangifer tarandus tarandus",
"Rangifer tarandus tarandus wild") &
sex %in% c("f", "m")) %>%
mutate_if(is.factor, droplevels) %>%
mutate(sex = case_when(castrated == "yes" ~ factor("c"),
.default = sex)) %>%
dplyr::select(-contains("iShape"), -contains("iSize"))
df_main %>%
filter(element == elementnames[x]) %>%
select(element, specimen, subspecies, group, sex, castrated, variable, value) %>%
pivot_wider(names_from = "variable",
values_from = "value") %>%
filter(subspecies %in% c("Rangifer tarandus fennicus",
"Rangifer tarandus tarandus",
"Rangifer tarandus tarandus wild") &
sex %in% c("f", "m")) %>%
mutate_if(is.factor, droplevels) %>%
mutate(sex = case_when(castrated == "yes" ~ factor("c"),
.default = sex)) %>%
dplyr::select(-contains("iShape"), -contains("iSize")) %>%
drop_na()
df <- df_main %>%
filter(element == elementnames[x]) %>%
select(element, specimen, subspecies, group, sex, castrated, variable, value) %>%
pivot_wider(names_from = "variable",
values_from = "value") %>%
filter(subspecies %in% c("Rangifer tarandus fennicus",
"Rangifer tarandus tarandus",
"Rangifer tarandus tarandus wild") &
sex %in% c("f", "m")) %>%
mutate_if(is.factor, droplevels) %>%
mutate(sex = case_when(castrated == "yes" ~ factor("c"),
.default = sex)) %>%
dplyr::select(-contains("iShape"), -contains("iSize")) %>%
drop_na()
